{"name":"Securejs","body":"# SecureJS\r\n\r\nAn extension of the JavaScript Object such that getting and setting data in the object is only possible when \r\nproviding a predetermined access key.\r\n\r\nThis key is first used to instantiate the SecureObject and subsequently used when storing and retrieving data \r\nfrom the SecureObject.\r\n\r\n### SecureJS satisfies the following requirements\r\n\r\n1. An object constructor with one parameter that defines the access key should be used to instantiate the SecureObject.\r\n\r\n2. The object should allow storing and retrieving data only if the supplied access key matches the original access key used to instantiate the SecureObject, otherwise an exception should be thrown.\r\n\r\n3. It should *NOT* be possible to inspect the object and sniff out the contents, i.e. inspecting in Firebug or iterating over properties with a for/in loop would yield no valuable information whatsoever.\r\n\r\n4. It should *NOT* be possible to peel into the object to obtain the access key used to instantiate the SecureObject\r\n\r\n5. We are not looking for functionality that encrypts/decrypts the stored data. -- We only want to store data in such a way that you can only gain read / write privileges by supplying the access key.\r\n\r\n### How does SecureJS work?\r\n\r\nSecureJS creates private instance members of the class it defines by forming a closure when objects are instanitiated. \r\nThis is accomplished by wrapping the function in an anonymous self executing function that returns the constructor making \r\nit possible to form a closure that includes both the class constructor and local variables. \r\n\r\nThus you can encapsulate and hide \r\nthe attributes of the object and use a privileged method to interact with a private method that checks the validity of the \r\nsupplied access key, making it possible to avoid ever returning the actual access key. \r\n\r\nAdditionally you can use the same set of functions to perform an access key check whenever you want to get or set any of the \r\nobjects other attributes.\r\n\r\nAll the while the exact details surrounding your implementation of SecureJS and a given instance of the secure object class \r\nremain hidden from the end user.\r\n\r\n### Notes on Encapsulation and Information Hiding in JavaScript\r\n\r\nI have included the notes I took on the topic of encapsulation and information hiding in JavaScript that I took while\r\nwriting SecureJS.js.\r\n","tagline":"An extension of the JavaScript Object such that getting and setting data in the object is only possible when providing a predetermined access key.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}